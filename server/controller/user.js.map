{"version":3,"sources":["../../../server/controller/user.js"],"names":["express","require","model","router","Router","moment","objectIdToTimestamp","createToken","sha1","checkToken","Register","req","res","userRegister","User","phone","body","password","recheck","token","create_time","_id","format","findOne","err","doc","console","log","json","success","save","Login","userLogin","info","name","time","find","send","delUser","findOneAndDelete","module","exports","post","get"],"mappings":";;AAAA;;;AAGA,IAAMA,UAAUC,QAAQ,SAAR,CAAhB;AACA,IAAMC,QAAQD,QAAQ,aAAR,CAAd;AACA,IAAME,SAASH,QAAQI,MAAR,EAAf;AACA,IAAMC,SAASJ,QAAQ,QAAR,CAAf;AACA,IAAMK,sBAAsBL,QAAQ,uBAAR,CAA5B;AACA,IAAMM,cAAcN,QAAQ,8BAAR,CAApB;AACA,IAAMO,OAAOP,QAAQ,MAAR,CAAb;AACA,IAAMQ,aAAaR,QAAQ,6BAAR,CAAnB;;AAEA;AACA,IAAMS,WAAW,SAAXA,QAAW,CAACC,GAAD,EAAMC,GAAN,EAAc;AAC7B,MAAIC,eAAe,IAAIX,MAAMY,IAAV,CAAe;AAChCC,WAAOJ,IAAIK,IAAJ,CAASD,KADgB;AAEhCE,cAAUT,KAAKG,IAAIK,IAAJ,CAASC,QAAd,CAFsB;AAGhCC,aAASP,IAAIK,IAAJ,CAASE,OAHc;AAIhCC,WAAOZ,YAAY,UAAKQ,KAAjB;AAJyB,GAAf,CAAnB;;AAOAF,eAAaO,WAAb,GAA2Bf,OAAOC,oBAAoBO,aAAaQ,GAAjC,CAAP,EAA8CC,MAA9C,CAAsD,qBAAtD,CAA3B;;AAEApB,QAAMY,IAAN,CAAWS,OAAX,CAAmB;AACjBR,WAAOF,aAAaE;AADH,GAAnB,EAEG,UAACS,GAAD,EAAMC,GAAN,EAAc;AACf,QAAID,GAAJ,EAASE,QAAQC,GAAR,CAAYH,GAAZ;AACT,QAAIC,GAAJ,EAAS;AACPb,UAAIgB,IAAJ,CAAS;AACPC,iBAAS;AADF,OAAT;AAGD,KAJD,MAIO;AACLhB,mBAAaiB,IAAb,CAAkB,eAAO;AACvB,YAAIN,GAAJ,EAASE,QAAQC,GAAR,CAAYH,GAAZ;AACTE,gBAAQC,GAAR,CAAY,kBAAZ;AACAf,YAAIgB,IAAJ,CAAS;AACPC,mBAAS;AADF,SAAT;AAGD,OAND;AAOD;AACF,GAjBD;AAkBD,CA5BD;;AA8BA;AACA,IAAME,QAAQ,SAARA,KAAQ,CAACpB,GAAD,EAAMC,GAAN,EAAc;AAC1B,MAAIoB,YAAY,IAAI9B,MAAMY,IAAV,CAAe;AAC7BC,WAAOJ,IAAIK,IAAJ,CAASD,KADa;AAE7BE,cAAUT,KAAKG,IAAIK,IAAJ,CAASC,QAAd,CAFmB;AAG7BE,WAAOZ,YAAY,UAAKQ,KAAjB;AAHsB,GAAf,CAAhB;AAKAb,QAAMY,IAAN,CAAWS,OAAX,CAAmB,EAAER,OAAOiB,UAAUjB,KAAnB,EAAnB,EAA+C,UAACS,GAAD,EAAMC,GAAN,EAAc;AAC3D,QAAID,GAAJ,EAASE,QAAQC,GAAR,CAAYH,GAAZ;AACT,QAAI,CAACC,GAAL,EAAU;AACRC,cAAQC,GAAR,CAAY,OAAZ;AACAf,UAAIgB,IAAJ,CAAS;AACPK,cAAM;AADC,OAAT;AAGD,KALD,MAKO,IAAID,UAAUf,QAAV,KAAuBQ,IAAIR,QAA/B,EAAyC;AAC9CS,cAAQC,GAAR,CAAY,MAAZ;AACA,UAAMO,OAAOvB,IAAIK,IAAJ,CAASD,KAAtB;AACAH,UAAIgB,IAAJ,CAAS;AACPC,iBAAS,IADF;AAEPd,eAAOU,IAAIV,KAFJ;AAGPoB,cAAM9B,OAAOC,oBAAoBmB,IAAIJ,GAAxB,CAAP,EAAqCC,MAArC,CAA4C,qBAA5C,CAHC;AAIPH,eAAOZ,YAAY2B,IAAZ;AAJA,OAAT;AAMD,KATM,MASA;AACLR,cAAQC,GAAR,CAAY,MAAZ;AACAf,UAAIgB,IAAJ,CAAS;AACPC,iBAAS;AADF,OAAT;AAGD;AACF,GAtBD;AAuBD,CA7BD;;AA+BA;AACA,IAAMf,OAAO,SAAPA,IAAO,CAACH,GAAD,EAAMC,GAAN,EAAc;AACzBV,QAAMY,IAAN,CAAWsB,IAAX,CAAgB,EAAhB,EAAoB,UAACZ,GAAD,EAAMC,GAAN,EAAc;AAChC,QAAID,GAAJ,EAASE,QAAQC,GAAR,CAAYH,GAAZ;AACTZ,QAAIyB,IAAJ,CAASZ,GAAT;AACD,GAHD;AAID,CALD;;AAOA;AACA,IAAMa,UAAU,SAAVA,OAAU,CAAC3B,GAAD,EAAMC,GAAN,EAAc;AAC5BV,QAAMY,IAAN,CAAWyB,gBAAX,CAA4B,EAAElB,KAAKV,IAAIK,IAAJ,CAASK,GAAhB,EAA5B,EAAmD,eAAO;AACxD,QAAIG,GAAJ,EAASE,QAAQC,GAAR,CAAYH,GAAZ;AACTE,YAAQC,GAAR,CAAY,QAAZ;AACAf,QAAIgB,IAAJ,CAAS;AACPC,eAAS;AADF,KAAT;AAGD,GAND;AAOD,CARD;;AAUAW,OAAOC,OAAP,GAAiB,UAACtC,MAAD,EAAY;AAC3BA,SAAOuC,IAAP,CAAY,WAAZ,EAAyBhC,QAAzB;AACAP,SAAOuC,IAAP,CAAY,QAAZ,EAAsBX,KAAtB;AACA5B,SAAOwC,GAAP,CAAW,OAAX,EAAoBlC,UAApB,EAAgCK,IAAhC;AACAX,SAAOuC,IAAP,CAAY,SAAZ,EAAuBjC,UAAvB,EAAmC6B,OAAnC;AACD,CALD","file":"user.js","sourcesContent":["/**\n *Created by admin on 2018/1/15\n */\nconst express = require('express')\nconst model = require('../db/db.js')\nconst router = express.Router()\nconst moment = require('moment')\nconst objectIdToTimestamp = require('objectid-to-timestamp')\nconst createToken = require('../middleware/createToken.js')\nconst sha1 = require('sha1')\nconst checkToken = require('../middleware/checkToken.js')\n\n// 注册\nconst Register = (req, res) => {\n  let userRegister = new model.User({\n    phone: req.body.phone,\n    password: sha1(req.body.password),\n    recheck: req.body.recheck,\n    token: createToken(this.phone)\n  })\n\n  userRegister.create_time = moment(objectIdToTimestamp(userRegister._id)).format(('YYYY-MM-DD HH:mm:ss'))\n\n  model.User.findOne({\n    phone: userRegister.phone\n  }, (err, doc) => {\n    if (err) console.log(err)\n    if (doc) {\n      res.json({\n        success: false\n      })\n    } else {\n      userRegister.save(err => {\n        if (err) console.log(err)\n        console.log('register success')\n        res.json({\n          success: true\n        })\n      })\n    }\n  })\n}\n\n// 登录\nconst Login = (req, res) => {\n  let userLogin = new model.User({\n    phone: req.body.phone,\n    password: sha1(req.body.password),\n    token: createToken(this.phone)\n  })\n  model.User.findOne({ phone: userLogin.phone }, (err, doc) => {\n    if (err) console.log(err)\n    if (!doc) {\n      console.log('账号不存在')\n      res.json({\n        info: false\n      })\n    } else if (userLogin.password === doc.password) {\n      console.log('登录成功')\n      const name = req.body.phone\n      res.json({\n        success: true,\n        phone: doc.phone,\n        time: moment(objectIdToTimestamp(doc._id)).format('YYYY-MM-DD HH:mm:ss'),\n        token: createToken(name)\n      })\n    } else {\n      console.log('密码错误')\n      res.json({\n        success: false\n      })\n    }\n  })\n}\n\n// 所有用户打印\nconst User = (req, res) => {\n  model.User.find({}, (err, doc) => {\n    if (err) console.log(err)\n    res.send(doc)\n  })\n}\n\n// 删除用户\nconst delUser = (req, res) => {\n  model.User.findOneAndDelete({ _id: req.body._id }, err => {\n    if (err) console.log(err)\n    console.log('删除用户成功')\n    res.json({\n      success: true\n    })\n  })\n}\n\nmodule.exports = (router) => {\n  router.post('/register', Register)\n  router.post('/login', Login)\n  router.get('/user', checkToken, User)\n  router.post('delUser', checkToken, delUser)\n}\n"]}